{"version":3,"sources":["components/matrix/index.module.scss","components/matrix/rain.ts","components/matrix/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","randInt","max","min","Math","floor","random","randSentence","arr","length","result","slice","temp","i","rand","shuffle","Rain","canvas","fontSize","emptyRange","allWords","split","map","str","alpha","color","text","emptyEle","produce","this","word","wordPerLine","minEmptyLength","minSentenceLength","pool","context","getContext","Error","shadowColor","textBaseline","window","addEventListener","resize","bind","drawFrame","globalAlpha","font","fillStyle","shadowOffsetX","shadowOffsetY","shadowBlur","clearRect","width","height","fillRect","clientWidth","clientHeight","preparePool","data","line","lastEle","offset","x","push","isEmpty","y","speed","lastEmptyCount","words","forEach","index","fillText","shouldEmpty","unshift","sentence","concat","clear","drawLine","requestAnimationFrame","Matrix","memo","className","canvasRef","useRef","canvasID","useMemo","nanoid","useState","fontReady","setFontReady","useEffect","fontfaceonload","success","canvasNode","current","e","console","error","classnames","styles","id","key","ref","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.785d1523.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"canvas\":\"matrix_canvas__2Q3JC\"};","/**\n * 怎样做出rain的效果\n *\n * 1. 一个弹幕池\n * 2. 通过随机填充空白字符的形式形成断句\n * 3. 填充字符后检查长度是否已经超过，如果已经超过就是用splice裁剪数组，避免无谓的渲染\n * 4. 填充字符后需要将y轴的偏移减去字符高度\n */\nimport produce from 'immer'\n\nfunction shuffle (arr: any[]) {\n  const length = arr.length\n  const result = arr.slice(0)\n  let temp = result[0]\n  for (let i = length - 1; i > 0; i--) {\n    const rand = randInt(i + 1)\n    temp = result[i]\n    result[i] = result[rand]\n    result[rand] = temp\n  }\n\n  return result\n}\n\nfunction randSpeed () {\n  return Math.random() * 3 + 2\n}\n\nfunction randInt (max: number, min = 0) {\n  min = Math.floor(min)\n  max = Math.floor(max - min)\n  return Math.floor(Math.random() * max) + min\n}\n\nfunction randWord<T extends any> (arr: T[]): T {\n  return arr[randInt(arr.length - 1)]\n}\n\nfunction randSentence<T extends any> (arr: T[], min: number, max: number): T[] {\n  const length = randInt(max, min)\n\n\n  return shuffle(arr).slice(0, length)\n}\n\ninterface Word {\n  alpha: number\n  color: '#cefbe4' | '#54d13c' | '#43c728'\n  text: string\n}\n\ninterface Line {\n  x: number\n  y: number\n  speed: number\n  lastEmptyCount: number\n  words: Word[]\n}\n\nclass Rain {\n  /** 全部可能出现的字符 */\n  private readonly allWords: Word[] = '0123456789qwertyuiopasdfghjklzxcvbnm'.split('').map(str => {\n    return {\n      alpha: 1,\n      color: '#43c728',\n      text: str\n    }\n  })\n  /** 空白占位元素 */\n  private readonly emptyEle = produce(this.allWords[0], word => {\n    word.alpha = 0\n  })\n  /** 每列最多放多少字符 */\n  private wordPerLine = this.allWords.length\n  /** 最小空白长度 */\n  private minEmptyLength = 0\n  /** 最小句子长度 */\n  private minSentenceLength = 0\n  /** 滚动池 */\n  private pool: Line[] = []\n  /** 画布话柄 */\n  private context: CanvasRenderingContext2D\n\n  constructor (\n    /** 画布 */\n    private readonly canvas: HTMLCanvasElement,\n    /** 字符大小 */\n    private readonly fontSize = 24,\n    /** 空白方位 */\n    private readonly emptyRange = 0.2,\n  ) {\n    const context = canvas.getContext('2d')\n    if (!context) {\n      throw new Error(\"not support canvas\")\n    }\n\n    this.context = context\n\n    context.shadowColor = '#94f475'\n    context.textBaseline = 'top'\n\n    window.addEventListener('resize', this.resize.bind(this))\n    this.resize()\n\n    this.drawFrame()\n  }\n\n  /** 清空画布 */\n  private clear () {\n    this.context.globalAlpha = 1\n\n    this.context.font = `${this.fontSize}px MatrixCode`\n    this.context.fillStyle = '#000'\n    this.context.shadowOffsetX = this.context.shadowOffsetY = 0\n    this.context.shadowBlur = 2\n\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n    this.context.fillRect(0, 0, this.canvas.width, this.canvas.height)\n  }\n\n  /** 监听画布大小变化 */\n  private resize () {\n    this.canvas.width = this.canvas.clientWidth\n    this.canvas.height = this.canvas.clientHeight\n\n    this.wordPerLine = Math.floor(this.canvas.height / this.fontSize) + 1\n    this.minEmptyLength = Math.floor(this.wordPerLine * this.emptyRange)\n    this.minSentenceLength = Math.floor(this.wordPerLine * (1 - this.emptyRange))\n\n    this.pool = this.preparePool(this.canvas, this.pool)\n  }\n\n  /** 补全弹幕池 */\n  private preparePool<T extends Line[]> (canvas: HTMLCanvasElement, data: T): T {\n    const lastEle = data[data.length - 1]\n    let offset = !lastEle ? 0 : lastEle.x\n    const width = canvas.width\n\n    let line: Line\n    const push = (data: Line[]) => { data.push(line) }\n\n    while (offset < width) {\n      const isEmpty = Math.random() < this.emptyRange\n      line = {\n        x: offset,\n        y: 0,\n        speed: randSpeed(),\n        lastEmptyCount: isEmpty ? 1 : 0,\n        words: [this.emptyEle]\n      }\n\n      data = produce(data, push)\n\n      offset += this.fontSize\n    }\n\n    return data\n  }\n\n  /** 列绘制 */\n  private drawLine (line: Line) {\n    const { x, y, words } = line\n    words.forEach((word, index) => {\n      this.context.fillStyle = word.color\n      this.context.globalAlpha = word.alpha\n      this.context.fillText(word.text, x, this.fontSize * index + y)\n    })\n  }\n\n  /** 帧绘制 */\n  private drawFrame () {\n    this.pool = produce(this.pool, pool => {\n      pool.forEach(line => {\n        /**\n         * 填充原则：\n         * 1. line的 y轴起点必须 大于 -fontSize, 否则不填充\n         * 2. 假设第一个是空白，则不少于 minEmptyLength 个空格才可以填充\n         * 3. 假设第一个不是空白，按照 emptyRange 来决定填充\n         * 4. 如果可以填充，填充对象是一个长度不小于 wordPerLine * (1 - emptyRange) 的句子\n         */\n\n        line.y += line.speed\n        const rand = randInt(line.words.length)\n        line.words[rand].text = randWord(this.allWords).text\n\n         if (line.y < -this.fontSize) {\n           return\n         }\n\n        const shouldEmpty = Math.random() < this.emptyRange\n        if (\n          (line.lastEmptyCount > 0 && randInt(line.lastEmptyCount) < this.minEmptyLength) ||\n          (line.lastEmptyCount === 0 && shouldEmpty)\n        ) {\n          line.lastEmptyCount += 1\n          line.words.unshift(this.emptyEle)\n          line.y -= this.fontSize\n        } else {\n          line.lastEmptyCount = 0\n          const sentence = produce(randSentence(this.allWords, this.minSentenceLength, this.wordPerLine / 1.4), sentence => {\n            sentence[sentence.length - 1].color = '#cefbe4'\n          })\n          line.y -= sentence.length * this.fontSize\n          line.words = sentence.concat(line.words)\n        }\n\n        if (line.words.length > this.wordPerLine * 3) {\n          line.words = line.words.slice(0, this.wordPerLine * 2)\n        }\n      })\n    })\n\n    this.clear()\n    this.pool.forEach(line => this.drawLine(line))\n\n    requestAnimationFrame(this.drawFrame.bind(this))\n  }\n}\n\nexport default Rain\n","import React, { NamedExoticComponent, memo, useEffect, useRef, useMemo, useState } from 'react'\nimport nanoid from 'nanoid/non-secure'\nimport classnames from 'clsx'\nimport fontfaceonload from 'fontfaceonload'\n\nimport Rain from './rain'\nimport styles from './index.module.scss'\n\ninterface Props {\n  className?: string\n}\nconst Matrix: NamedExoticComponent<Props> = memo(({ className = '' }) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const canvasID = useMemo(() => nanoid(), [])\n  const [fontReady, setFontReady] = useState(false)\n\n  useEffect(() => {\n    fontfaceonload('MatrixCode', {\n      success: () => {\n        setFontReady(true)\n      }\n    })\n  }, [setFontReady])\n\n  useEffect(() => {\n    if (!fontReady) {\n      return\n    }\n\n    const canvasNode = canvasRef.current\n    if (!canvasNode) {\n      console.error(new Error('dont support canvas'))\n      return\n    }\n\n    try {\n      new Rain(canvasNode)\n    } catch (e) {\n      console.error(e)\n    }\n\n  }, [fontReady])\n\n  return (\n    <>\n      <canvas\n        className={classnames(\n          className,\n          styles.canvas,\n        )}\n        id={canvasID}\n        key={canvasID}\n        ref={canvasRef}\n      />\n    </>\n  )\n})\n\nexport { Matrix }\nexport default Matrix\n","import React from 'react';\n\nimport Matrix from './components/matrix'\n\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Matrix className='fullserceen' />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}